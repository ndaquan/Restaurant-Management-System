<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard - RESOWNER Management</title>
  <link rel="stylesheet" href="/css/ownerDashboard.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
  <div class="container-fluid mt-4">
    <div class="card shadow">
      <div class="card-body">
        <h4 class="mb-4 text-center fw-bold"
            style="font-family: 'Poppins', sans-serif;
                  font-size: 2rem;
                  background: linear-gradient(90deg, #ff0000, #ff0000);
                  -webkit-background-clip: text;
                  -webkit-text-fill-color: transparent;
                  letter-spacing: 1px;">
          <i class="fas fa-user-shield me-2"></i> Quản lý chủ nhà hàng
        </h4>

        <!-- Filters -->
        <form method="GET" action="/owner/users" class="form-inline mb-3">
          <input
            type="text"
            class="form-control mr-2 mb-2 search-input"
            name="search"
            placeholder="Tìm theo email, SĐT, hoặc tên nhà hàng"
            value="<%= typeof query !== 'undefined' ? query.search : '' %>"
          />
          <select name="subscription" class="form-control mr-2 mb-2">
            <option value="">Tất cả gói</option>
            <option value="TRIAL">Trial</option>
            <option value="MONTHLY">Monthly</option>
            <option value="YEARLY">Yearly</option>
            <option value="EXPIRED">Expired</option>
          </select>
          <select name="status" class="form-control mr-2 mb-2">
            <option value="">Tất cả trạng thái</option>
            <option value="ACTIVE">Active</option>
            <option value="INACTIVE">Inactive</option>
          </select>
          <button type="submit" class="btn btn-danger mb-2">Lọc</button>
        </form>

        <!-- Table -->
        <div class="table-responsive">
          <table class="table table-bordered table-hover">
            <thead class="thead-dark">
              <tr>
                <th>#</th>
                <th>Tên</th>
                <th>Email</th>
                <th>SĐT</th>
                <th>Nhà hàng</th>
                <th>Gói</th>
                <th>Bắt đầu</th>
                <th>Kết thúc</th>
                <th>Trạng thái</th>
                <th>Tạo lúc</th>
                <th>Hành động</th>
              </tr>
            </thead>
            <tbody>
              <% resowners.forEach((owner, index) => { %>
                <tr class="<%= owner.subscription?.type === 'EXPIRED' || new Date(owner.subscription?.expiredAt) < new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) ? 'table-danger' : '' %>">
                  <td><%= index + 1 %></td>
                  <td><%= owner.firstName %> <%= owner.lastName %></td>
                  <td><%= owner.email %></td>
                  <td><%= owner.phoneNumber || 'N/A' %></td>
                  <td><%= owner.restaurantName %></td>
                  <td><%= owner.subscription?.type || '-' %></td>
                  <td>
                    <%= owner.subscription?.startedAt
                      ? new Date(owner.subscription.startedAt).toLocaleDateString()
                      : new Date(owner.createdAt).toLocaleDateString() %>
                  </td>
                  <td>
                    <%= owner.subscription?.type === "TRIAL"
                      ? (owner.subscription.trialEnd ? new Date(owner.subscription.trialEnd).toLocaleDateString() : '-')
                      : (owner.subscription?.expiredAt ? new Date(owner.subscription.expiredAt).toLocaleDateString() : '-') %>
                  </td>
                  <td>
                    <span class="badge <%= owner.status === 'ACTIVE' ? 'badge-success' : 'badge-secondary' %>">
                      <%= owner.status %>
                    </span>
                  </td>
                  <td><%= owner.createdAt?.toLocaleString() %></td>
                  <td>
                    <form method="POST" action="/owner/toggle/<%= owner._id %>">
                      <button type="submit" class="btn btn-sm <%= owner.status === 'ACTIVE' ? 'btn-outline-danger' : 'btn-outline-success' %>">
                        <%= owner.status === 'ACTIVE' ? 'Deactivate' : 'Activate' %>
                      </button>
                    </form>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          </table>
        </div>

        <% if (pagination && pagination !== '') { %>
          <div class="mt-3 text-center">
            <%- pagination %>
          </div>
        <% } %>
      </div>
    </div>
  </div>

    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function() {
            const searchTerm = this.value;
            if (searchTerm.length > 2 || searchTerm.length === 0) {
                debounceSearch(searchTerm);
            }
        });

        // Filter functionality
        document.getElementById('subscriptionFilter').addEventListener('change', applyFilters);
        document.getElementById('statusFilter').addEventListener('change', applyFilters);

        // Clear filters
        document.getElementById('clearFilters').addEventListener('click', function() {
            window.location.href = window.location.pathname;
        });

        // Refresh data
        document.getElementById('refreshData').addEventListener('click', function() {
            window.location.reload();
        });

        // View detail buttons
        document.querySelectorAll('.view-detail-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const userId = this.dataset.userId;
                viewUserDetail(userId);
            });
        });

        // Deactivate buttons
        document.querySelectorAll('.deactivate-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const userId = this.dataset.userId;
                const userName = this.dataset.userName;
                confirmDeactivation(userId, userName);
            });
        });

        // Reactivate buttons
        document.querySelectorAll('.reactivate-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const userId = this.dataset.userId;
                const userName = this.dataset.userName;
                confirmReactivation(userId, userName);
            });
        });

        // Debounce search function
        let searchTimeout;
        function debounceSearch(searchTerm) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                const url = new URL(window.location);
                if (searchTerm) {
                    url.searchParams.set('search', searchTerm);
                } else {
                    url.searchParams.delete('search');
                }
                url.searchParams.delete('page'); // Reset to first page
                window.location.href = url.toString();
            }, 500);
        }

        // Apply filters function
        function applyFilters() {
            const subscriptionFilter = document.getElementById('subscriptionFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            
            const url = new URL(window.location);
            
            if (subscriptionFilter) {
                url.searchParams.set('filter', subscriptionFilter);
            } else {
                url.searchParams.delete('filter');
            }
            
            if (statusFilter) {
                url.searchParams.set('status', statusFilter);
            } else {
                url.searchParams.delete('status');
            }
            
            url.searchParams.delete('page'); // Reset to first page
            window.location.href = url.toString();
        }

        // View user detail function
        function viewUserDetail(userId) {
            // You can implement this to show user details in a modal
            // For now, we'll redirect to a detail page
            window.location.href = `/admin/resowners/${userId}`;
        }

        // Confirm deactivation
        function confirmDeactivation(userId, userName) {
            Swal.fire({
                title: 'Deactivate User?',
                text: `Are you sure you want to deactivate ${userName}? They will lose access to their account.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Deactivate',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    updateUserStatus(userId, 'INACTIVE');
                }
            });
        }

        // Confirm reactivation
        function confirmReactivation(userId, userName) {
            Swal.fire({
                title: 'Reactivate User?',
                text: `Are you sure you want to reactivate ${userName}? They will regain access to their account.`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Reactivate',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    updateUserStatus(userId, 'ACTIVE');
                }
            });
        }

        // Update user status
        function updateUserStatus(userId, status) {
            fetch(`/admin/resowners/${userId}/status`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: status })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: `User status updated to ${status.toLowerCase()}.`,
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to update user status.',
                        icon: 'error'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while updating user status.',
                    icon: 'error'
                });
            });
        }

        // Modal functionality
        const modal = document.getElementById('userDetailModal');
        const closeModal = document.querySelector('.close-modal');

        closeModal.addEventListener('click', function() {
            modal.style.display = 'none';
        });

        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    </script>
</body>
</html>