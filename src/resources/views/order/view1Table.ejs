<div class="d-flex gap-3 p-4" style="height: 90vh; overflow: hidden;">
    <!-- Left Panel: Table Info -->
    <div class="w-50 border p-4 rounded shadow-sm d-flex flex-column" style="height: 100%;">
        <h2 class="h5 fw-bold mb-3">
            B√†n s·ªë <%= table.idTable %> - <span class="text-muted">Session <%= table.session %></span>
        </h2>
        <div class="flex-grow-1" style="overflow: auto;">
            <table class="table table-bordered text-center" id="orderDataTable">
                <thead>
                    <tr>
                        <th>T√™n m√≥n ƒÉn</th>
                        <th>S·ªë l∆∞·ª£ng</th>
                        <th>Tr·∫°ng th√°i</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
        <div class="row mt-3">
            <div class="col-6" id="left-panel-total-price">T·ªïng gi√°:</div>
            <div class="col-6">
                <form class="thanh-toan" method="get">
                    <button class="btn btn-primary w-100" type="submit">Thanh to√°n</button>
                </form>
            </div>
            <div class="mt-3">
                <button onclick="resetTable('<%= table._id %>')" class="btn btn-danger w-100">
                    Reset b√†n (Kh√°ch m·ªõi)
                </button>
            </div>
        </div>
    </div>

    <!-- Right Panel: Menu List -->
    <div class="w-50 border p-4 rounded shadow-sm d-flex flex-column" style="overflow: auto;">
        <h2 class="h5 fw-bold mb-3">Th·ª±c ƒë∆°n</h2>
        <div class="row g-3">
            <% menus.forEach(menu=> { %>
                <div class="col-6 col-md-4">
                    <div class="border rounded p-3 shadow-sm text-center">
                        <img src="<%= menu.imageUrl %>" alt="<%= menu.foodName %>" class="img-fluid rounded"
                            style="max-width: 100px; height: 80px; object-fit: cover;">
                        <h3 class="h6 fw-semibold mt-2">
                            <%= menu.foodName %>
                        </h3>
                        <p class="text-muted">
                            <%= Number(menu.price).toLocaleString("vi-VN") %> VND
                        </p>
                        <p class="text-<%=menu.statusFood === 'AVAILABLE' ? 'success': 'danger'%>">
                            <%=menu.statusFood==='AVAILABLE' ? 'C√≤n m√≥n' : 'ƒê√£ h·∫øt' %>
                        </p>
                        <button onclick="removePrepareDishes('<%=menu._id%>', '<%=menu.price%>')"
                            <%=menu.statusFood==='UNAVAILABLE' ? 'disabled' : '' %> class="btn btn-warning">-</button>
                        <span id="number_dishes_<%=menu._id%>">0</span>
                        <button onclick="addPrepareDishes('<%=menu._id%>', '<%=menu.price%>')"
                            <%=menu.statusFood==='UNAVAILABLE' ? 'disabled' : '' %> class="btn btn-warning">+</button>
                    </div>
                </div>
                <% }) %>
        </div>
        <div class="row g-3">
            <button disabled onclick="add()" id="add" class="btn btn-success w-100 m-1">Th√™m</button>
        </div>
    </div>
</div>
<script>
    let addedDishes = [];
    let toAddDished = [];
    let toAddDishesPrice = 0;
    let tableId = '<%= table._id %>'
    const socket = new WebSocket("ws://localhost:3000");
    socket.onopen = () => console.log("üü¢ Socket connected");
    socket.onmessage = (event) => {
        const data = JSON.parse(event.data);
        if (data.tableId === tableId) {
            console.log("üîÑ C·∫≠p nh·∫≠t order b√†n t·ª´ socket");
            getTableOrderInfo();
        }
    };
    socket.onclose = () => console.log("üî¥ Socket disconnected");
    getTableOrderInfo();
    function addPrepareDishes(id, price) {
        toAddDished.push(id);
        toAddDishesPrice += price;
        updatePrepareDishesNumber(id);
        changeAddButton();
    }
    function removePrepareDishes(id, price) {
        if (toAddDished.length === 0) return;
        toAddDished.splice(toAddDished.indexOf(id), 1);
        toAddDishesPrice -= price;
        updatePrepareDishesNumber(id);
        changeAddButton();
    }
    function countPrepareDishes(id) {
        return toAddDished.filter(dish => dish === id).length;
    }
    function updatePrepareDishesNumber(id) {
        let number = countPrepareDishes(id);
        $("#number_dishes_" + id).text(number)
    }
    function changeAddButton() {
        let btn = $('#add');
        if (toAddDished.length === 0) {
            btn.prop('disabled', true);
            btn.text('Th√™m')
        } else {
            btn.prop('disabled', false);
            const formatted = Number(toAddDishesPrice).toLocaleString("vi-VN");
            btn.text('Th√™m ' + toAddDished.length + ' m√≥n ƒÉn (' + formatted + ' VND)');
        }
    }
    function add() {
        const data = {
            tableId: tableId,
            dishes: toAddDished,
        }
        axios.post('/order', data)
            .then((res) => {
                if (res.status === 200) {
                    toastr.success(res.data.message)
                    toAddDished = [];
                    toAddDishesPrice = 0;
                    changeAddButton();
                    getTableOrderInfo();
                    $("span[id^='number_dishes_']").text(0);
                    socket.send(1)
                } else {
                    toastr.success('L·ªói h·ªá th·ªëng.')
                }
            })
    }
    function getTableOrderInfo() {
        console.log("üöÄ ƒêang g·ªçi API t·ªõi:", `/order/order-of-table/${tableId}`);
        axios.get(`/order/order-of-table/${tableId}`)
            .then((res) => {
                console.log("üì• API tr·∫£ v·ªÅ:", res.data);
                let html = '';
                let totalPrice = 0;
                if (!res.data || !res.data.dishes || res.data.dishes.length === 0) {
                console.warn("‚ö†Ô∏è Kh√¥ng c√≥ m√≥n ƒÉn n√†o trong order!");
            } else {
                console.log("‚úÖ C√≥", res.data.dishes.length, "m√≥n ƒÉn trong order.");
            }
                for (let i = 0; i < res.data.dishes.length; i++) {
                    console.log(`üçΩÔ∏è M√≥n ${i + 1}:`, res.data.dishes[i]);

                    html += `<tr>` +
                        `<td>${res.data.dishes[i].menuItem.foodName}</td>` +
                        `<td>${res.data.dishes[i].quantity}</td>` +
                        `<td>${res.data.dishes[i].statusOrder}</td>` +
                        `</tr>`;
                    totalPrice += res.data.dishes[i].quantity * Number(res.data.dishes[i].menuItem.price.$numberDecimal);
                }
                $("#orderDataTable tbody").html(html);
                $(".thanh-toan").attr('action', '/payment/' + res.data._id + '/order');
                const formattedTotal = totalPrice.toLocaleString("vi-VN");
                console.log("üí∞ T·ªïng gi√°:", formattedTotal, "VND");
                $("#left-panel-total-price").text('T·ªïng gi√°: ' + formattedTotal + ' VND');
            }).catch((err) => {
                console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin order:", err.response ? err.response.data : err);

                toastr.error(err.response.data.message)
            })
    }
   function resetTable(tableId) {
    console.log("üåê ƒê∆∞·ªùng g·ªçi API full:", `${window.location.origin}/tables/api/reset-table/${tableId}`);
    fetch(`/admin/tables/api/reset-table/${tableId}`, { method: 'POST' })
        .then(res => {
            console.log("üì• Response status:", res.status);
            return res.json();
        })
        .then(data => {
            console.log("‚úÖ Response data:", data);
            toastr.success(data.message);
            location.reload(); // üî• Reload ƒë·ªÉ load session m·ªõi
        })
        .catch(err => {
            console.error("‚ùå L·ªói fetch reset b√†n:", err);
            toastr.error("L·ªói reset b√†n");
        });
}
</script>