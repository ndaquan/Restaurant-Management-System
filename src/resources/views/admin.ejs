<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
    }
    .dashboard-title {
      text-align: center;
      font-weight: bold;
      font-size: 2.2rem;
      background: linear-gradient(90deg, #43cea2, #185a9d);
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 1rem;
    }
    .dashboard-subtitle {
      text-align: center;
      color: #6c757d;
      font-size: 1.1rem;
      margin-bottom: 2rem;
    }
    .card {
      border-radius: 1rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }
    .card-header {
      text-align: center;
      font-weight: 600;
      text-transform: uppercase;
      background: linear-gradient(90deg, #4e73df, #1cc88a);
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      letter-spacing: 1px;
      text-shadow: 0 0 5px rgba(78, 115, 223, 0.5);
    }
    .stats-icon {
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
    }
    .text-muted {
      font-size: 0.95rem;
    }
  </style>
</head>
<body>
  <div class="container-fluid mt-4">
    <!-- Dashboard Header -->
    <h1 class="dashboard-title"><i class="bi me-2"></i>Owner Dashboard</h1>
    <p class="dashboard-subtitle">T·ªïng quan b√°o c√°o ho·∫°t ƒë·ªông nh√† h√†ng</p>

    <!-- üí∏ Card doanh thu h√¥m nay -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="card text-white border-0" style="background: linear-gradient(135deg, #00c6ff, #0072ff);">
          <div class="card-body d-flex justify-content-between align-items-center py-4 px-5">
            <div class="d-flex align-items-center">
              <i class="bi bi-cash-coin display-4 me-4"></i>
              <div>
                <h6 class="text-uppercase fw-bold mb-2" style="letter-spacing: 1px;">Doanh thu h√¥m nay</h6>
                <h1 class="display-5 fw-bold mb-0" id="dailyRevenue">0 VND</h1>
              </div>
            </div>
            <div class="text-end">
              <p class="mb-0 fs-6 text-light">S·ªë l∆∞·ª£t b√†n</p>
              <h3 class="fw-bold mb-0" id="dailySessions">0</h3>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- üì¶ C√°c card th·ªëng k√™ -->
    <div class="row">
      <div class="col-md-3 mb-4">
        <div class="card border-start border-4 border-primary">
          <div class="card-body text-center">
            <i class="bi bi-people-fill text-primary stats-icon"></i>
            <h2 class="fw-bold mb-1"><%= totalEmployees %></h2>
            <p class="text-muted">T·ªïng nh√¢n vi√™n</p>
          </div>
        </div>
      </div>
      <div class="col-md-3 mb-4">
        <div class="card border-start border-4 border-success">
          <div class="card-body text-center">
            <i class="bi bi-grid-fill text-success stats-icon"></i>
            <h2 class="fw-bold mb-1"><%= totalTables %></h2>
            <p class="text-muted">T·ªïng s·ªë b√†n</p>
          </div>
        </div>
      </div>
      <div class="col-md-3 mb-4">
        <div class="card border-start border-4 border-warning">
          <div class="card-body text-center">
            <i class="bi bi-egg-fried text-warning stats-icon"></i>
            <h2 class="fw-bold mb-1"><%= totalDishes %></h2>
            <p class="text-muted">T·ªïng m√≥n ƒÉn</p>
          </div>
        </div>
      </div>
      <div class="col-md-3 mb-4">
        <div class="card border-start border-4 border-danger">
          <div class="card-body text-center">
            <i class="bi bi-box-seam text-danger stats-icon"></i>
            <h2 class="fw-bold mb-1"><%= totalIngredients %></h2>
            <p class="text-muted">T·ªïng nguy√™n li·ªáu</p>
          </div>
        </div>
      </div>
    </div>

    <!-- ü™ë T√¨nh tr·∫°ng b√†n + üçΩÔ∏è Top m√≥n ƒÉn -->
    <div class="row">
      <div class="col-md-6 mb-4">
        <div class="card shadow">
          <div class="card-header">T√¨nh tr·∫°ng b√†n</div>
          <div class="card-body">
            <canvas id="tableStatusChart" height="450"></canvas>
          </div>
        </div>
      </div>
      <div class="col-md-6 mb-4">
        <div class="card shadow">
          <div class="card-header">Top 5 m√≥n ƒÉn (30 ng√†y)</div>
          <div class="card-body">
            <canvas id="topDishesChart" height="254"></canvas>
          </div>
        </div>
      </div>
    </div>

    <!-- üìä Bi·ªÉu ƒë·ªì doanh thu th√°ng -->
    <div class="row">
      <div class="col-12">
        <div class="card shadow">
          <div class="card-header">Doanh thu th√°ng n√†y</div>
          <div class="card-body">
            <canvas id="monthlyRevenueChart" height="250"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- Bootstrap JS v√† Popper.js -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    async function loadTableStatusChart() {
      try {
        const response = await fetch('/admin/api/table-status');
        const data = await response.json();

        const total = data.available + data.occupied + data.reserved;
        if (total === 0) {
          document.getElementById('tableStatusChart').parentElement.innerHTML = 
            "<p class='text-center text-muted'>Kh√¥ng c√≥ d·ªØ li·ªáu b√†n ƒë·ªÉ hi·ªÉn th·ªã</p>";
          return; 
        }

        const ctx = document.getElementById('tableStatusChart').getContext('2d');
        new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: ['Tr·ªëng', 'ƒêang c√≥ kh√°ch', 'ƒê√£ ƒë·∫∑t tr∆∞·ªõc'],
            datasets: [{
              data: [data.available, data.occupied, data.reserved],
              backgroundColor: [
                'rgba(29, 233, 182, 0.8)',  // Mint
                'rgba(255, 87, 34, 0.8)',   // Deep Orange
                'rgba(255, 202, 40, 0.8)'   // Sun Yellow
              ],
              hoverBackgroundColor: [
                'rgba(29, 233, 182, 1)',
                'rgba(255, 87, 34, 1)',
                'rgba(255, 202, 40, 1)'
              ],
              borderColor: '#2c3e50',
              hoverOffset: 10,
              borderRadius: 10,
            }]
          },
          options: {
            maintainAspectRatio: false,
            responsive: true,
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  color: '#333',
                  font: {
                    size: 14,
                    family: "'Poppins', sans-serif"
                  },
                  usePointStyle: true,
                  pointStyle: 'circle'
                }
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    let label = context.label || '';
                    let value = context.parsed;
                    let total = context.dataset.data.reduce((a, b) => a + b, 0);
                    return `${label}: ${value} b√†n `;
                  }
                },
                backgroundColor: '#fff',
                titleColor: '#000',
                bodyColor: '#333',
                borderColor: '#ccc',
                borderWidth: 1
              }
            },
            animation: {
              animateScale: true,
              animateRotate: true
            }
          }
        });
      } catch (err) {
        console.error('L·ªói khi load chart:', err);
      }
    }

    loadTableStatusChart();
  </script>
  <script>
    async function loadTopDishesChart() {
      try {
        const response = await fetch('/admin/api/top-dishes');
        const data = await response.json();

        const labels = data.map(dish => dish.name || "Kh√¥ng x√°c ƒë·ªãnh");
        const dataset = data.map(dish => dish.totalOrdered);

        if (dataset.length === 0 || dataset.reduce((a, b) => a + b, 0) === 0) {
          document.getElementById('topDishesChart').parentElement.innerHTML =
            "<p class='text-center text-muted'>Kh√¥ng c√≥ d·ªØ li·ªáu m√≥n ƒÉn ƒë·ªÉ hi·ªÉn th·ªã</p>";
          return;
        }

        const ctx = document.getElementById('topDishesChart').getContext('2d');

        // // üåà T·∫°o gradient m√†u cho t·ª´ng c·ªôt
        // const gradients = labels.map((_, index) => {
        //   const gradient = ctx.createLinearGradient(0, 0, 0, 400);
        //   switch (index % 5) {
        //     case 0:
        //       gradient.addColorStop(0, "#4e73df"); // xanh ƒë·∫≠m
        //       gradient.addColorStop(1, "#a5b4fc"); // xanh nh·∫°t
        //       break;
        //     case 1:
        //       gradient.addColorStop(0, "#1cc88a"); // xanh l√° ƒë·∫≠m
        //       gradient.addColorStop(1, "#99f6e4"); // xanh l√° nh·∫°t
        //       break;
        //     case 2:
        //       gradient.addColorStop(0, "#36b9cc"); // xanh cyan ƒë·∫≠m
        //       gradient.addColorStop(1, "#a7f3d0"); // xanh cyan nh·∫°t
        //       break;
        //     case 3:
        //       gradient.addColorStop(0, "#f6c23e"); // v√†ng ƒë·∫≠m
        //       gradient.addColorStop(1, "#fde68a"); // v√†ng nh·∫°t
        //       break;
        //     case 4:
        //       gradient.addColorStop(0, "#e74a3b"); // ƒë·ªè ƒë·∫≠m
        //       gradient.addColorStop(1, "#fecaca"); // ƒë·ªè nh·∫°t
        //       break;
        //   }
        //   return gradient;
        // });

        const solidColors = ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b'];

        const hoverColors = ['#7d93ff', '#4fffc8', '#6fe9ff', '#ffe680', '#ff7a7a'];

        new Chart(ctx, {
          type: 'bar',
          data: {
            labels,
            datasets: [{
              label: 'S·ªë l∆∞·ª£t g·ªçi',
              data: dataset,
              backgroundColor: solidColors,
              borderRadius: 8, 
              barThickness: 40,
              hoverBackgroundColor: hoverColors,
              hoverBorderColor: hoverColors, 
              hoverBorderWidth: 2 
            }]
          },
          options: {
            indexAxis: 'x',
            responsive: true,
            plugins: {
              legend: { display: false },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const value = context.parsed.y;
                    const total = dataset.reduce((a, b) => a + b, 0);
                    const percent = ((value / total) * 100).toFixed(1);
                    return `${value} l∆∞·ª£t g·ªçi (${percent}%)`;
                  }
                },
                backgroundColor: '#fff',
                titleColor: '#333',
                bodyColor: '#333',
                borderColor: '#ccc',
                borderWidth: 1
              }
            },
            scales: {
              x: {
                ticks: {
                  callback: function(value) {
                    const label = this.getLabelForValue(value);
                    const words = label.split(' ');
                    let lines = [];
                    for (let i = 0; i < words.length; i += 2) {
                      lines.push(words.slice(i, i + 2).join(' '));
                    }
                    return lines; 
                  },
                  font: {
                    size: 12,
                    family: "'Poppins', sans-serif"
                  },
                  maxRotation: 0,
                  minRotation: 0
                },
                grid: { drawOnChartArea: false }
              },
              y: {
                beginAtZero: true,
                ticks: {
                  stepSize: 1
                }
              }
            },
            animation: {
              duration: 800,
              easing: 'easeOutBounce'
            }
          }
        });
      } catch (err) {
        console.error('L·ªói khi load chart m√≥n ƒÉn:', err);
      }
    }

    loadTopDishesChart();
  </script>
  <script>
    async function loadMonthlyRevenueChart() {
      try {
        const response = await fetch('/admin/api/revenue/monthly');
        const data = await response.json();

        console.log("üìä Data doanh thu th√°ng:", data); // ‚úÖ DEBUG

        const ctx = document.getElementById('monthlyRevenueChart').getContext('2d');
        new Chart(ctx, {
          type: 'line',
          data: {
            labels: data.dailyRevenue.map(r => `Ng√†y ${r.day}`),
            datasets: [{
              label: 'Doanh thu (VND)',
              data: data.dailyRevenue.map(r => r.dailyTotal),
              fill: true,
              borderColor: 'rgba(75, 192, 192, 1)',
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: { position: 'top' }
            },
            scales: {
              y: { beginAtZero: true }
            }
          }
        });
      } catch (err) {
        console.error('‚ùå L·ªói load doanh thu th√°ng:', err);
      }
    }

  loadMonthlyRevenueChart();
</script>
<script>
  async function loadDailyRevenue() {
    try {
      const response = await fetch('/admin/api/revenue/daily');
      const data = await response.json();

      document.getElementById('dailyRevenue').innerText =
        data.totalRevenue.toLocaleString("vi-VN") + " VND";
      document.getElementById('dailySessions').innerText = data.totalSessions;
    } catch (err) {
      console.error('‚ùå L·ªói load doanh thu h√¥m nay:', err);
    }
  }

  loadDailyRevenue();
  </script>
</body>
</html>


